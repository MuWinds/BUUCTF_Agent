import requests
from typing import Dict, List
from ctf_tool.base_tool import BaseTool
import logging

logger = logging.getLogger(__name__)

class MCPServerAdapter(BaseTool):
    def __init__(self, server_config: dict):
        self.server_name = server_config["name"]
        self.base_url = server_config["url"]
        self.auth_token = server_config.get("auth_token")
        self.tools = {}  # 存储MCP服务器提供的工具
        self._load_mcp_tools()

    def _load_mcp_tools(self):
        """从MCP服务器加载所有可用工具"""
        headers = {"Authorization": f"Bearer {self.auth_token}"} if self.auth_token else {}
        try:
            response = requests.get(f"{self.base_url}/tools", headers=headers, timeout=10)
            response.raise_for_status()
            tools_info:dict = response.json()

            for tool_info in tools_info:
                # 为每个工具创建动态方法
                tool_name = f"mcp_{self.server_name}_{tool_info['name']}"
                self.tools[tool_name] = {
                    "description": tool_info.get("description", ""),
                    "parameters": tool_info.get("parameters", {})
                }
                logger.info(f"已加载MCP工具: {tool_name}")
        except Exception as e:
            logger.error(f"加载MCP工具失败: {str(e)}")

    def execute(self, tool_name: str, arguments: dict):
        """执行MCP服务器上的工具"""
        if tool_name not in self.tools:
            return "", f"错误：未知的MCP工具 '{tool_name}'"

        payload = {
            "tool": tool_name.split("_")[-1],  # 提取原始工具名
            "arguments": arguments
        }

        headers = {"Content-Type": "application/json"}
        if self.auth_token:
            headers["Authorization"] = f"Bearer {self.auth_token}"

        try:
            response = requests.post(
                f"{self.base_url}/execute",
                json=payload,
                headers=headers,
                timeout=30
            )
            response.raise_for_status()
            result = response.json()
            return result.get("output", ""), result.get("error", "")
        except Exception as e:
            logger.error(f"MCP工具执行失败: {str(e)}")
            return "", f"MCP工具执行错误: {str(e)}"

    @property
    def function_configs(self) -> List[Dict]:
        """为每个MCP工具生成函数配置"""
        configs = []
        for tool_name, tool_info in self.tools.items():
            configs.append({
                "type": "function",
                "function": {
                    "name": tool_name,
                    "description": tool_info["description"],
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "purpose": {
                                "type": "string",
                                "description": "执行此步骤的目的",
                            },
                            **tool_info["parameters"]["properties"]
                        },
                        "required": ["purpose"] + tool_info["parameters"].get("required", [])
                    }
                }
            })
        return configs